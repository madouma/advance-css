@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    transform: translateY(3rem);
    opacity: 0; }
  100% {
    transform: translateY(0);
    opacity: 1; } }

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  /* 
  ** This defines what 1 rem is.
  ** root font-size. Everything calculates from it. Also 10px makes it easier to convert to rem.
  ** here 1rem = 10px so 1.6rem = 16px
  */
  /* font-size: 10px; */
  font-size: 62.5%;
  /* 10px/16px <-- browser default */ }

body {
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  /* font-size: 16px; */
  font-size: 1.6rem;
  line-height: 1.7;
  font-weight: 400;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* to avoid flickering or shakiness during animation */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    /* 
    animation-delay: 3s; 
    animation-iteration-count: 3;
    */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /* Short hand of the above example */
    animation: moveInRight 1s ease-out; }

.btn:link, .btn:visited {
  text-decoration: none;
  padding: 1.5rem 4rem;
  text-transform: uppercase;
  display: inline-block;
  border-radius: 10rem;
  transition: all 0.2s;
  position: relative;
  /* 
      ** button pseudo element (child on the button). 
      ** It will appear right next to the parent unless we hide with z-index and absolute positining
      */ }
  .btn:link:hover, .btn:visited:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /* pseudo hover props */ }
    .btn:link:hover::after, .btn:visited:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
      /* So it can fade out at the end of the animation */ }
  .btn:link:active, .btn:visited:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn:link::after, .btn:visited::after {
    /* Required properties */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    /* inherited props */
    border-radius: 10rem;
    /* hidden initially relative to immidiate parent, in this case .btn*/
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* animation */
    transition: all 0.4s ease-out; }

.btn--white {
  background: #fff;
  color: inherit;
  /* pseudo inherited color props */ }
  .btn--white::after {
    background: #fff; }

.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards;
  /* to prevent non animated intial state */ }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(85, 197, 122, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem;
    cursor: pointer; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }
